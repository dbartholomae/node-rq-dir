// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice;

  (function(modules, factory) {
    var m;
    if (typeof define === 'function' && define.amd) {
      return define(modules, factory);
    } else {
      return module.exports = factory.apply(null, (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = modules.length; _i < _len; _i++) {
          m = modules[_i];
          _results.push(require(m));
        }
        return _results;
      })());
    }
  })(['node-dir', 'path'], function(dir, path) {
    return {
      load: function(name, require, onload) {
        var basePath, dirname, err;
        basePath = require.toUrl('');
        dirname = require.toUrl(name);
        try {
          return dir.files(dirname, function(err, paths) {
            var p;
            if (err) {
              onload.error(err);
            }
            if (paths.length === 0) {
              onload.error(new Error("Directory " + dirname + " is empty"));
            }
            paths = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = paths.length; _i < _len; _i++) {
                p = paths[_i];
                if (path.extname(p) === ".js") {
                  _results.push(p);
                }
              }
              return _results;
            })();
            return require(paths, function() {
              var i, module, moduleObject, modules, _i, _len;
              modules = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              paths = paths.map(function(p) {
                return path.relative(basePath, p);
              });
              moduleObject = {};
              for (i = _i = 0, _len = modules.length; _i < _len; i = ++_i) {
                module = modules[i];
                moduleObject[paths[i]] = module;
              }
              return onload(moduleObject);
            });
          });
        } catch (_error) {
          err = _error;
          return onload.error(err);
        }
      }
    };
  });

}).call(this);
